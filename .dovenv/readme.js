import { defineConfig } from '@dovenv/core'
import {
	createBadgeURL,
	createMdLinks,
	joinUrl,
	writeFile,
} from '@dovenv/core/utils'
import { Contributors } from '@dovenv/repo'

import pkg         from '../package.json' with { type: 'json' }
import { getMark } from './mark.js'

/**
 * Creates a Markdown link object with a badge image URL.
 *
 * @param   {object} params         - The parameters for creating the link.
 * @param   {string} params.name    - The name to display on the badge.
 * @param   {string} params.url     - The URL to link to.
 * @param   {string} [params.color] - The color of the badge.
 * @param   {string} [params.logo]  - The logo to use on the badge.
 * @returns {object}                - An object containing the name, URL, and badge image URL.
 */
const createMdLink = ( {
	name, url, color = 'black', logo,
} ) => ( {
	name   : name,
	URL    : url,
	imgURL : createBadgeURL( {
		color,
		logoColor : 'white',
		path      : 'badge/' + encodeURIComponent( name + '-' + color ),
		style     : 'for-the-badge',
		logo,
		name,
	} ),
} )
/**
 * Validate package
 *
 * @param {Record<string, any>} obj - Validate object
 */
const validatePkg = obj => {

	for ( const key in obj )
		if ( !obj[key] ) throw new Error( `(package.json).${key} is required` )

}

/**
 *
 * Generate readme.
 *
 * @param   {typeof import('../package.json')} pkg               - package.json
 * @param   {string}                           contributorsTable - Contributors table
 * @returns {Promise<string>}                                    Mark string
 */
const setReadme = async ( pkg, contributorsTable ) => {

	validatePkg( {
		'author.name'           : pkg.author.name,
		'author.url'            : pkg.author.url,
		'version'               : pkg.version,
		'description'           : pkg.description,
		'repository.url'        : pkg.repository.url,
		'funding.url'           : pkg.funding.url,
		'extra.productName'     : pkg.extra.productName,
		'extra.collective.url'  : pkg.extra.collective.url,
		'extra.repoPath'        : pkg.extra.repoPath,
		'extra.productNameLong' : pkg.extra.productNameLong,
	} )

	const licensePath = `./LICENSE`
	const bannerPath  = `docs/banner.png`

	return `<!-- File autogenerated by .dovenv/readme.js. Please do not edit HERE cause it will be overwritten -->
<!--\n${await getMark( pkg )}\n-->

# ${pkg.extra.productName.toUpperCase()} - ${pkg.extra.productNameLong}

[![HEADER](${bannerPath})](${pkg.repository.url})

${createMdLinks( [
	{
		name   : 'License',
		URL    : licensePath,
		imgURL : createBadgeURL( {
			color : 'green',
			style : 'for-the-badge',
			name  : 'License',
			path  : `github/license/${pkg.extra.repoPath}`,
		} ),
	},
	{
		name   : 'Github Releases',
		URL    : pkg.repository.url,
		imgURL : createBadgeURL( {
			color : 'blue',
			style : 'for-the-badge',
			name  : 'Github Releases',
			path  : `github/package-json/v/${pkg.extra.repoPath}`,
		} ),
	},
] )}

${pkg.description}

> This application is for **development** purposes only.

## Download

${createMdLinks( [
	createMdLink( {
		name : 'Macos Intel',
		url  : pkg.extra.downloadUrl.macosIntel,
	} ),
	createMdLink( {
		name : 'Macos Silicon',
		url  : pkg.extra.downloadUrl.macosSilicon,
	} ),

] )}

### All releases

${createMdLinks( [
	createMdLink( {
		name : 'All releases',
		url  : joinUrl( pkg.repository.url, 'releases' ),
	} ),
] )}

> [!CAUTION]
> The **Silicon** application is currently broken, so two possible solutions are recommended:
> - Install the macOS **x86** version, which works on both Intel (x86) Macs and Apple Silicon Macs with Rosetta 2.
> - Download **DMG** and run [(#ref)](https://github.com/angelespejo/macos-app-trial-extender/pull/1#issuecomment-3175667453): 
> ${'```bash'}
> codesign -f -s - /Applications/MATE.app/Contents/MacOS/MATE
> xattr -dr com.apple.quarantine /Applications/MATE.app/Contents/MacOS/MATE
> ${'```'}

## Screenshots

![Screen App](./docs/screenshot-app.png)
![Screen Tray icon](./docs/screenshot-tray.png)
![Screen App settings](./docs/screenshot-app-settings.png)

## üë®‚Äçüíª Contribute

You can contribute via **_Github_**.

${createMdLinks( [
	createMdLink( {
		name  : 'Issues',
		url   : pkg.bugs.url,
		color : 'gray',
	} ),
	createMdLink( {
		name  : 'Pull requests',
		url   : joinUrl( pkg.repository.url, 'pulls' ),
		color : 'gray',
	} ),
] )}

### Want to contribute as a tester?

Notifying that you've tested the app and that it works on your operating system, add the test information [here](.dovenv/app.info.ts) and make a **pull request**!

## ‚òï Donate

Help us to develop more interesting things.

${createMdLinks( [
	createMdLink( {
		name  : 'Donate',
		url   : pkg.funding.url,
		color : 'gray',
	} ),
] )}

## üìú License

This software is licensed with **[${pkg.license}](${licensePath})**.

${createMdLinks( [
	createMdLink( {
		name  : 'Read more',
		url   : licensePath,
		color : 'gray',
	} ),
] )}

## üê¶ About us

_PigeonPosse_ is a ‚ú® **code development collective** ‚ú® focused on creating practical and interesting tools that help developers and users enjoy a more agile and comfortable experience. Our projects cover various programming sectors and we do not have a thematic limitation in terms of projects.

${createMdLinks( [
	createMdLink( {
		name  : 'Read more',
		url   : pkg.extra.collective.url,
		color : 'gray',
	} ),
] )}

${contributorsTable}

</br>

<p align="center">

${createMdLinks( [
	createMdLink( {
		name  : 'Web',
		url   : pkg.extra.collective.web,
		color : 'grey',
	} ),
	createMdLink( {
		name  : 'About Us',
		url   : pkg.extra.collective.about,
		color : 'grey',
	} ),
	createMdLink( {
		name  : 'Donate',
		url   : pkg.funding.url,
		color : 'pink',
	} ),
	createMdLink( {
		name  : 'Github',
		url   : pkg.extra.collective.gh,
		logo  : 'github',
		color : 'black',
	} ),
	createMdLink( {
		name  : 'Twitter',
		url   : pkg.extra.collective.social.twitter,
		logo  : 'x',
		color : 'black',
	} ),
	createMdLink( {
		name  : 'Instagram',
		url   : pkg.extra.collective.social.instagram,
		logo  : 'instagram',
		color : 'black',
	} ),
	createMdLink( {
		name  : 'Medium',
		url   : pkg.extra.collective.social.medium,
		logo  : 'medium',
		color : 'black',
	} ),
] )}

</p>
`

}

export default defineConfig( { custom : { readme : {
	desc : 'Create dynamic readme',
	fn   : async data => {

		try {

			const contr = new Contributors( { utils: data.utils } )

			if ( !data?.utils?.config?.const?.contributors ) throw new Error( 'contributors is required. See .dovenv/contributors.js' )
			const tableContent = await contr.getMarkdownContent( data.utils.config.const.contributors )

			const readme = await setReadme( pkg, tableContent )
			await writeFile( 'README.md', readme )

		}
		catch ( err ) {

			console.error( err )

		}

	},
} } } )
